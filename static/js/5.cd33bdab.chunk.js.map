{"version":3,"sources":["components/OccupationSearch.jsx","../node_modules/js-search/dist/esm/js-search.js","components/JsOccSearch.jsx"],"names":["resultRenderer","title","key","OccupationSearch","props","useState","isLoading","setIsLoading","query","setQuery","results","setResults","selectedOccupation","setSelectedOccupation","Field","fluid","input","icon","iconPosition","loading","onResultSelect","e","result","onSearchChange","_","debounce","value","setTimeout","length","queryFn","leading","description","header","meta","defaultProps","PrefixIndexStrategy","prototype","expandToken","token","expandedTokens","string","i","charAt","push","LowerCaseSanitizer","sanitize","text","toLocaleLowerCase","trim","getNestedFieldValue","object","path","TfIdfSearchIndex","uidFieldName","this","_uidFieldName","_tokenToIdfCache","_tokenMap","_proto","indexDocument","uid","doc","tokenDatum","tokenMap","$numDocumentOccurrences","$totalNumOccurrences","$uidMap","uidMap","$document","$numTokenOccurrences","search","tokens","corpus","uidToDocumentMap","numTokens","tokenMetadata","j","numKeys","keys","Object","documents","calculateTfIdf","_createCalculateTfIdf","sort","documentA","documentB","_createCalculateIdf","tokenToIdfCache","numDocumentsWithToken","Math","log","calculateIdf","document","score","inverseDocumentFrequency","Infinity","Array","REGEX","SimpleTokenizer","tokenize","split","filter","_defineProperties","target","descriptor","enumerable","configurable","writable","defineProperty","Search","Error","_indexStrategy","_searchIndex","_sanitizer","_tokenizer","_documents","_searchableFields","Constructor","protoProps","staticProps","addDocument","addDocuments","concat","indexDocuments_","addIndex","field","_initialized","indexStrategy","sanitizer","searchIndex","tokenizer","di","numDocuments","sfi","numSearchableFields","fieldValue","searchableField","toString","fieldTokens","fti","numFieldValues","fieldToken","eti","nummExpandedTokens","expandedToken","set","get","JsOccSearch","undefined","source","idxJsSearch","JsSearch","map","nocTitle","combinedExamples","nocCode","nocLevel"],"mappings":"wLAMMA,EAAiB,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,MAAe,CAACA,GAAS,yBAAKC,IAAI,SAASD,KAO5DE,EAAmB,SAACC,GAAW,IAAD,EACAC,oBAAS,GADT,mBAC3BC,EAD2B,KAChBC,EADgB,OAERF,mBAAS,IAFD,mBAE3BG,EAF2B,KAEpBC,EAFoB,OAGJJ,mBAAS,IAHL,mBAG3BK,EAH2B,KAGlBC,EAHkB,OAIkBN,mBAAS,IAJ3B,mBAI3BO,EAJ2B,KAIPC,EAJO,KA6BlC,OACE,oCACE,kBAAC,IAAD,KACE,kBAAC,IAAKC,MAAN,KACE,mFACA,kBAAC,IAAD,CACEC,OAAK,EACLC,MAAO,CAAEC,KAAM,SAAUC,aAAc,QACvCC,QAASb,EACTc,eA1BiB,SAACC,EAAD,GAAqB,IAAfC,EAAc,EAAdA,OAC/Bb,EAAS,IACTI,EAAsBS,IAyBdC,eAAgBC,IAAEC,UAtBD,SAACJ,EAAD,GAAmB,IAAbK,EAAY,EAAZA,MAC/BnB,GAAa,GACbE,EAASiB,GAETC,YAAW,WACT,GAAID,EAAME,OAAS,EAAG,OAfxBrB,GAAa,GACbE,EAAS,SACTE,EAAW,IAcTJ,GAAa,GACbI,EAAWP,EAAMyB,QAAQH,MACxB,OAcoD,IAAK,CAClDI,SAAS,IAEXpB,QAASA,EACTV,eAAgBA,EAChB0B,MAAOlB,MAIXI,EAAmBX,OACnB,kBAAC,IAAD,CACEc,OAAK,EACLgB,YAAanB,EAAmBmB,YAChCC,OAAQpB,EAAmBX,MAC3BgC,KAAMrB,EAAmBqB,SAUnC9B,EAAiB+B,aAAe,GAEjB/B,O,4DC3BXgC,EAAmC,WACrC,SAASA,KAmBT,OAjBaA,EAAoBC,UAK1BC,YAAc,SAAqBC,GAIxC,IAHA,IAAIC,EAAiB,GACjBC,EAAS,GAEJC,EAAI,EAAGb,EAASU,EAAMV,OAAQa,EAAIb,IAAUa,EACnDD,GAAUF,EAAMI,OAAOD,GACvBF,EAAeI,KAAKH,GAGtB,OAAOD,GAGFJ,EApB8B,GA4CnCS,EAAkC,WACpC,SAASA,KAWT,OATaA,EAAmBR,UAKzBS,SAAW,SAAkBC,GAClC,OAAOA,EAAOA,EAAKC,oBAAoBC,OAAS,IAG3CJ,EAZ6B,GAsBtC,SAASK,EAAoBC,EAAQC,GACnCA,EAAOA,GAAQ,GAIf,IAFA,IAAIzB,EADJwB,EAASA,GAAU,GAGVT,EAAI,EAAGA,EAAIU,EAAKvB,OAAQa,IAG/B,GAAa,OAFbf,EAAQA,EAAMyB,EAAKV,KAGjB,OAAO,KAIX,OAAOf,EAMT,IAAI0B,EAAgC,WAClC,SAASA,EAAiBC,GACxBC,KAAKC,cAAgBF,EACrBC,KAAKE,iBAAmB,GACxBF,KAAKG,UAAY,GAOnB,IAAIC,EAASN,EAAiBhB,UA+H9B,OA7HAsB,EAAOC,cAAgB,SAAuBrB,EAAOsB,EAAKC,GACxDP,KAAKE,iBAAmB,GAExB,IACIM,EADAC,EAAWT,KAAKG,UAGW,kBAApBM,EAASzB,GAClByB,EAASzB,GAASwB,EAAa,CAC7BE,wBAAyB,EACzBC,qBAAsB,EACtBC,QAAS,KAGXJ,EAAaC,EAASzB,IACX2B,uBAGb,IAAIE,EAASL,EAAWI,QAEG,kBAAhBC,EAAOP,IAChBE,EAAWE,0BACXG,EAAOP,GAAO,CACZQ,UAAWP,EACXQ,qBAAsB,IAGxBF,EAAOP,GAAKS,wBAQhBX,EAAOY,OAAS,SAAgBC,EAAQC,GAGtC,IAFA,IAAIC,EAAmB,GAEdhC,EAAI,EAAGiC,EAAYH,EAAO3C,OAAQa,EAAIiC,EAAWjC,IAAK,CAC7D,IAAIH,EAAQiC,EAAO9B,GACfkC,EAAgBrB,KAAKG,UAAUnB,GAEnC,IAAKqC,EACH,MAAO,GAGT,GAAU,IAANlC,EAGF,IAFA,IAESmC,EAAI,EAAGC,GAFZC,EAAOC,OAAOD,KAAKH,EAAcT,UAENtC,OAAQgD,EAAIC,EAASD,IAAK,CAEvDH,EADIb,EAAMkB,EAAKF,IACSD,EAAcT,QAAQN,GAAKQ,cAGrD,KAAIU,EAEJ,IAASF,EAAI,EAAGC,GAFZC,EAAOC,OAAOD,KAAKL,IAEQ7C,OAAQgD,EAAIC,EAASD,IAAK,CACvD,IAAIhB,EAAMkB,EAAKF,GAE2B,kBAA/BD,EAAcT,QAAQN,WACxBa,EAAiBb,KAMhC,IAAIoB,EAAY,GAEhB,IAAK,IAAIpB,KAAOa,EACdO,EAAUrC,KAAK8B,EAAiBb,IAGlC,IAAIqB,EAAiB3B,KAAK4B,wBAG1B,OAAOF,EAAUG,MAAK,SAAUC,EAAWC,GACzC,OAAOJ,EAAeV,EAAQc,EAAWb,GAAUS,EAAeV,EAAQa,EAAWZ,OAIzFd,EAAO4B,oBAAsB,WAC3B,IAAIvB,EAAWT,KAAKG,UAChB8B,EAAkBjC,KAAKE,iBAC3B,OAAO,SAAsBlB,EAAO0C,GAClC,IAAKO,EAAgBjD,GAAQ,CAC3B,IAAIkD,EAAmD,qBAApBzB,EAASzB,GAAyByB,EAASzB,GAAO0B,wBAA0B,EAC/GuB,EAAgBjD,GAAS,EAAImD,KAAKC,IAAIV,EAAUpD,QAAU,EAAI4D,IAGhE,OAAOD,EAAgBjD,KAI3BoB,EAAOwB,sBAAwB,WAC7B,IAAInB,EAAWT,KAAKG,UAChBJ,EAAeC,KAAKC,cAEpBoC,EAAerC,KAAKgC,sBAExB,OAAO,SAAwBf,EAAQqB,EAAUZ,GAG/C,IAFA,IAAIa,EAAQ,EAEHpD,EAAI,EAAGiC,EAAYH,EAAO3C,OAAQa,EAAIiC,IAAajC,EAAG,CAC7D,IAOImB,EAPAtB,EAAQiC,EAAO9B,GACfqD,EAA2BH,EAAarD,EAAO0C,GAE/Cc,IAA6BC,MAC/BD,EAA2B,GAM3BlC,EADEP,aAAwB2C,MACpBJ,GAAY3C,EAAoB2C,EAAUvC,GAE1CuC,GAAYA,EAASvC,GAI7BwC,IAD+C,qBAApB9B,EAASzB,IAAkE,qBAAjCyB,EAASzB,GAAO4B,QAAQN,GAAuBG,EAASzB,GAAO4B,QAAQN,GAAKS,qBAAuB,GAC/IyB,EAG3B,OAAOD,IAIJzC,EA1I2B,GAqNhC6C,EAAQ,oCAKRC,EAA+B,WACjC,SAASA,KAcT,OAZaA,EAAgB9D,UAKtB+D,SAAW,SAAkBrD,GAClC,OAAOA,EAAKsD,MAAMH,GAAOI,QAAO,SAAUvD,GACxC,OAAOA,MAKJoD,EAf0B,GAwNnC,SAASI,EAAkBC,EAAQnG,GACjC,IAAK,IAAIqC,EAAI,EAAGA,EAAIrC,EAAMwB,OAAQa,IAAK,CACrC,IAAI+D,EAAapG,EAAMqC,GACvB+D,EAAWC,WAAaD,EAAWC,aAAc,EACjDD,EAAWE,cAAe,EACtB,UAAWF,IAAYA,EAAWG,UAAW,GACjD5B,OAAO6B,eAAeL,EAAQC,EAAWtG,IAAKsG,IAelD,IAAIK,EAAsB,WAUxB,SAASA,EAAOxD,GACd,IAAKA,EACH,MAAMyD,MAAM,6DAGdxD,KAAKC,cAAgBF,EAErBC,KAAKyD,eAAiB,IAAI5E,EAC1BmB,KAAK0D,aAAe,IAAI5D,EAAiBC,GACzCC,KAAK2D,WAAa,IAAIrE,EACtBU,KAAK4D,WAAa,IAAIhB,EACtB5C,KAAK6D,WAAa,GAClB7D,KAAK8D,kBAAoB,GAS3B,IA1CoBC,EAAaC,EAAYC,EA0CzC7D,EAASmD,EAAOzE,UAuKpB,OAjKAsB,EAAO8D,YAAc,SAAqB5B,GACxCtC,KAAKmE,aAAa,CAAC7B,KAQrBlC,EAAO+D,aAAe,SAAsBzC,GAC1C1B,KAAK6D,WAAa7D,KAAK6D,WAAWO,OAAO1C,GACzC1B,KAAKqE,gBAAgB3C,EAAW1B,KAAK8D,oBASvC1D,EAAOkE,SAAW,SAAkBC,GAClCvE,KAAK8D,kBAAkBzE,KAAKkF,GAE5BvE,KAAKqE,gBAAgBrE,KAAK6D,WAAY,CAACU,KASzCnE,EAAOY,OAAS,SAAgB9D,GAC9B,IAAI+D,EAASjB,KAAK4D,WAAWf,SAAS7C,KAAK2D,WAAWpE,SAASrC,IAE/D,OAAO8C,KAAK0D,aAAa1C,OAAOC,EAAQjB,KAAK6D,aAS/CzD,EAAOiE,gBAAkB,SAAyB3C,EAAWoC,GAC3D9D,KAAKwE,cAAe,EAOpB,IANA,IAAIC,EAAgBzE,KAAKyD,eACrBiB,EAAY1E,KAAK2D,WACjBgB,EAAc3E,KAAK0D,aACnBkB,EAAY5E,KAAK4D,WACjB7D,EAAeC,KAAKC,cAEf4E,EAAK,EAAGC,EAAepD,EAAUpD,OAAQuG,EAAKC,EAAcD,IAAM,CACzE,IACIvE,EADAC,EAAMmB,EAAUmD,GAIlBvE,EADEP,aAAwB2C,MACpB/C,EAAoBY,EAAKR,GAEzBQ,EAAIR,GAGZ,IAAK,IAAIgF,EAAM,EAAGC,EAAsBlB,EAAkBxF,OAAQyG,EAAMC,EAAqBD,IAAO,CAClG,IAAIE,EACAC,EAAkBpB,EAAkBiB,GAYxC,GAJkB,OALhBE,EADEC,aAA2BxC,MAChB/C,EAAoBY,EAAK2E,GAEzB3E,EAAI2E,KAG6B,kBAAfD,GAA2BA,EAAWE,WACrEF,EAAaA,EAAWE,YAGA,kBAAfF,EAGT,IAFA,IAAIG,EAAcR,EAAU/B,SAAS6B,EAAUnF,SAAS0F,IAE/CI,EAAM,EAAGC,EAAiBF,EAAY9G,OAAQ+G,EAAMC,EAAgBD,IAI3E,IAHA,IAAIE,EAAaH,EAAYC,GACzBpG,EAAiBwF,EAAc1F,YAAYwG,GAEtCC,EAAM,EAAGC,EAAqBxG,EAAeX,OAAQkH,EAAMC,EAAoBD,IAAO,CAC7F,IAAIE,EAAgBzG,EAAeuG,GACnCb,EAAYtE,cAAcqF,EAAepF,EAAKC,OArItCwD,EA6IPR,GA7IoBS,EA6IZ,CAAC,CACpBpH,IAAK,gBACL+I,IAAK,SAAavH,GAChB,GAAI4B,KAAKwE,aACP,MAAMhB,MAAM,qDAGdxD,KAAKyD,eAAiBrF,GAExBwH,IAAK,WACH,OAAO5F,KAAKyD,iBAQb,CACD7G,IAAK,YACL+I,IAAK,SAAavH,GAChB,GAAI4B,KAAKwE,aACP,MAAMhB,MAAM,iDAGdxD,KAAK2D,WAAavF,GAEpBwH,IAAK,WACH,OAAO5F,KAAK2D,aAQb,CACD/G,IAAK,cACL+I,IAAK,SAAavH,GAChB,GAAI4B,KAAKwE,aACP,MAAMhB,MAAM,mDAGdxD,KAAK0D,aAAetF,GAEtBwH,IAAK,WACH,OAAO5F,KAAK0D,eAQb,CACD9G,IAAK,YACL+I,IAAK,SAAavH,GAChB,GAAI4B,KAAKwE,aACP,MAAMhB,MAAM,iDAGdxD,KAAK4D,WAAaxF,GAEpBwH,IAAK,WACH,OAAO5F,KAAK4D,gBA5MAZ,EAAkBe,EAAYjF,UAAWkF,GACrDC,GAAajB,EAAkBe,EAAaE,GA+MzCV,EAtMiB,G,SC7hBXsC,UA5CK,SAAC/I,GACnB,QAAqBgJ,IAAjBhJ,EAAMiJ,OAAsB,MAAM,IAAIvC,MAAM,gCAEhD,IAAMwC,EAAc,IAAIC,EAAgB,MAExCD,EAAYrB,YAAc,IAAIsB,EAS9BD,EAAYvB,cAAgB,IAAIwB,EAQhCD,EAAY1B,SAAS,YACrB0B,EAAY1B,SAAS,oBACrB0B,EAAY7B,aAAarH,EAAMiJ,QAW/B,OACE,kBAAClJ,EAAA,EAAD,CAAkBD,IAAI,YAAY2B,QAVlB,SAACrB,GACjB,OAAO8I,EAAYhF,OAAO9D,GAAOgJ,KAAI,SAAAlI,GACnC,MAAO,CACLrB,MAAOqB,EAAOmI,SACd1H,YAAaT,EAAOoI,iBACpBzH,KAAK,QAAD,OAAUX,EAAOqI,QAAjB,qBAAqCrI,EAAOsI","file":"static/js/5.cd33bdab.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from 'prop-types'\nimport { Search, Form, Card } from \"semantic-ui-react\";\nimport _ from 'lodash'\n\n\nconst resultRenderer = ({ title }) => [title && <div key='title'>{title}</div>];\n\nresultRenderer.propTypes = {\n  title: PropTypes.string,\n}\n\n\nconst OccupationSearch = (props) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [query, setQuery] = useState('');\n  const [results, setResults] = useState([]);\n  const [selectedOccupation, setSelectedOccupation] = useState({});\n\n  const resetState = () => {\n    setIsLoading(false);\n    setQuery('');\n    setResults([]);\n  }\n\n  const handleResultSelect = (e, { result }) =>  {\n    setQuery(''); //result.nocTitle\n    setSelectedOccupation(result);\n  }\n\n  const handleSearchChange = (e, { value }) => {\n    setIsLoading(true);\n    setQuery(value);\n\n    setTimeout(() => {\n      if (value.length < 1) return resetState()\n      setIsLoading(false)\n      setResults(props.queryFn(value))\n    }, 300)\n  }\n  \n\n  return (\n    <>\n      <Form>\n        <Form.Field>\n          <label>Type your job title and select the closest match</label>\n          <Search\n            fluid\n            input={{ icon: 'search', iconPosition: 'left' }}\n            loading={isLoading}\n            onResultSelect={handleResultSelect}\n            onSearchChange={_.debounce(handleSearchChange, 500, {\n              leading: true\n            })}\n            results={results}\n            resultRenderer={resultRenderer}\n            value={query}\n          />\n        </Form.Field>\n      </Form>\n      { selectedOccupation.title && \n        <Card\n          fluid\n          description={selectedOccupation.description}\n          header={selectedOccupation.title}\n          meta={selectedOccupation.meta}\n        />\n      }\n    </>\n  );\n};\n\nOccupationSearch.propTypes = {\n  queryFn: PropTypes.func.isRequired,\n}\nOccupationSearch.defaultProps = {}\n\nexport default OccupationSearch;","/**\n * Indexes for all substring searches (e.g. the term \"cat\" is indexed as \"c\", \"ca\", \"cat\", \"a\", \"at\", and \"t\").\n */\nvar AllSubstringsIndexStrategy = /*#__PURE__*/function () {\n  function AllSubstringsIndexStrategy() {}\n\n  var _proto = AllSubstringsIndexStrategy.prototype;\n\n  /**\n   * @inheritDocs\n   */\n  _proto.expandToken = function expandToken(token) {\n    var expandedTokens = [];\n    var string;\n\n    for (var i = 0, length = token.length; i < length; ++i) {\n      string = '';\n\n      for (var j = i; j < length; ++j) {\n        string += token.charAt(j);\n        expandedTokens.push(string);\n      }\n    }\n\n    return expandedTokens;\n  };\n\n  return AllSubstringsIndexStrategy;\n}();\n\n/**\n * Indexes for exact word matches.\n */\nvar ExactWordIndexStrategy = /*#__PURE__*/function () {\n  function ExactWordIndexStrategy() {}\n\n  var _proto = ExactWordIndexStrategy.prototype;\n\n  /**\n   * @inheritDocs\n   */\n  _proto.expandToken = function expandToken(token) {\n    return token ? [token] : [];\n  };\n\n  return ExactWordIndexStrategy;\n}();\n\n/**\n * Indexes for prefix searches (e.g. the term \"cat\" is indexed as \"c\", \"ca\", and \"cat\" allowing prefix search lookups).\n */\nvar PrefixIndexStrategy = /*#__PURE__*/function () {\n  function PrefixIndexStrategy() {}\n\n  var _proto = PrefixIndexStrategy.prototype;\n\n  /**\n   * @inheritDocs\n   */\n  _proto.expandToken = function expandToken(token) {\n    var expandedTokens = [];\n    var string = '';\n\n    for (var i = 0, length = token.length; i < length; ++i) {\n      string += token.charAt(i);\n      expandedTokens.push(string);\n    }\n\n    return expandedTokens;\n  };\n\n  return PrefixIndexStrategy;\n}();\n\n/**\n * Enforces case-sensitive text matches.\n */\nvar CaseSensitiveSanitizer = /*#__PURE__*/function () {\n  function CaseSensitiveSanitizer() {}\n\n  var _proto = CaseSensitiveSanitizer.prototype;\n\n  /**\n   * @inheritDocs\n   */\n  _proto.sanitize = function sanitize(text) {\n    return text ? text.trim() : '';\n  };\n\n  return CaseSensitiveSanitizer;\n}();\n\n/**\n * Sanitizes text by converting to a locale-friendly lower-case version and triming leading and trailing whitespace.\n */\nvar LowerCaseSanitizer = /*#__PURE__*/function () {\n  function LowerCaseSanitizer() {}\n\n  var _proto = LowerCaseSanitizer.prototype;\n\n  /**\n   * @inheritDocs\n   */\n  _proto.sanitize = function sanitize(text) {\n    return text ? text.toLocaleLowerCase().trim() : '';\n  };\n\n  return LowerCaseSanitizer;\n}();\n\n/**\n * Find and return a nested object value.\n *\n * @param object to crawl\n * @param path Property path\n * @returns {any}\n */\nfunction getNestedFieldValue(object, path) {\n  path = path || [];\n  object = object || {};\n  var value = object; // walk down the property path\n\n  for (var i = 0; i < path.length; i++) {\n    value = value[path[i]];\n\n    if (value == null) {\n      return null;\n    }\n  }\n\n  return value;\n}\n\n/**\n * Search index capable of returning results matching a set of tokens and ranked according to TF-IDF.\n */\nvar TfIdfSearchIndex = /*#__PURE__*/function () {\n  function TfIdfSearchIndex(uidFieldName) {\n    this._uidFieldName = uidFieldName;\n    this._tokenToIdfCache = {};\n    this._tokenMap = {};\n  }\n  /**\n   * @inheritDocs\n   */\n\n\n  var _proto = TfIdfSearchIndex.prototype;\n\n  _proto.indexDocument = function indexDocument(token, uid, doc) {\n    this._tokenToIdfCache = {}; // New index invalidates previous IDF caches\n\n    var tokenMap = this._tokenMap;\n    var tokenDatum;\n\n    if (typeof tokenMap[token] !== 'object') {\n      tokenMap[token] = tokenDatum = {\n        $numDocumentOccurrences: 0,\n        $totalNumOccurrences: 1,\n        $uidMap: {}\n      };\n    } else {\n      tokenDatum = tokenMap[token];\n      tokenDatum.$totalNumOccurrences++;\n    }\n\n    var uidMap = tokenDatum.$uidMap;\n\n    if (typeof uidMap[uid] !== 'object') {\n      tokenDatum.$numDocumentOccurrences++;\n      uidMap[uid] = {\n        $document: doc,\n        $numTokenOccurrences: 1\n      };\n    } else {\n      uidMap[uid].$numTokenOccurrences++;\n    }\n  }\n  /**\n   * @inheritDocs\n   */\n  ;\n\n  _proto.search = function search(tokens, corpus) {\n    var uidToDocumentMap = {};\n\n    for (var i = 0, numTokens = tokens.length; i < numTokens; i++) {\n      var token = tokens[i];\n      var tokenMetadata = this._tokenMap[token]; // Short circuit if no matches were found for any given token.\n\n      if (!tokenMetadata) {\n        return [];\n      }\n\n      if (i === 0) {\n        var keys = Object.keys(tokenMetadata.$uidMap);\n\n        for (var j = 0, numKeys = keys.length; j < numKeys; j++) {\n          var uid = keys[j];\n          uidToDocumentMap[uid] = tokenMetadata.$uidMap[uid].$document;\n        }\n      } else {\n        var keys = Object.keys(uidToDocumentMap);\n\n        for (var j = 0, numKeys = keys.length; j < numKeys; j++) {\n          var uid = keys[j];\n\n          if (typeof tokenMetadata.$uidMap[uid] !== 'object') {\n            delete uidToDocumentMap[uid];\n          }\n        }\n      }\n    }\n\n    var documents = [];\n\n    for (var uid in uidToDocumentMap) {\n      documents.push(uidToDocumentMap[uid]);\n    }\n\n    var calculateTfIdf = this._createCalculateTfIdf(); // Return documents sorted by TF-IDF\n\n\n    return documents.sort(function (documentA, documentB) {\n      return calculateTfIdf(tokens, documentB, corpus) - calculateTfIdf(tokens, documentA, corpus);\n    });\n  };\n\n  _proto._createCalculateIdf = function _createCalculateIdf() {\n    var tokenMap = this._tokenMap;\n    var tokenToIdfCache = this._tokenToIdfCache;\n    return function calculateIdf(token, documents) {\n      if (!tokenToIdfCache[token]) {\n        var numDocumentsWithToken = typeof tokenMap[token] !== 'undefined' ? tokenMap[token].$numDocumentOccurrences : 0;\n        tokenToIdfCache[token] = 1 + Math.log(documents.length / (1 + numDocumentsWithToken));\n      }\n\n      return tokenToIdfCache[token];\n    };\n  };\n\n  _proto._createCalculateTfIdf = function _createCalculateTfIdf() {\n    var tokenMap = this._tokenMap;\n    var uidFieldName = this._uidFieldName;\n\n    var calculateIdf = this._createCalculateIdf();\n\n    return function calculateTfIdf(tokens, document, documents) {\n      var score = 0;\n\n      for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n        var token = tokens[i];\n        var inverseDocumentFrequency = calculateIdf(token, documents);\n\n        if (inverseDocumentFrequency === Infinity) {\n          inverseDocumentFrequency = 0;\n        }\n\n        var uid;\n\n        if (uidFieldName instanceof Array) {\n          uid = document && getNestedFieldValue(document, uidFieldName);\n        } else {\n          uid = document && document[uidFieldName];\n        }\n\n        var termFrequency = typeof tokenMap[token] !== 'undefined' && typeof tokenMap[token].$uidMap[uid] !== 'undefined' ? tokenMap[token].$uidMap[uid].$numTokenOccurrences : 0;\n        score += termFrequency * inverseDocumentFrequency;\n      }\n\n      return score;\n    };\n  };\n\n  return TfIdfSearchIndex;\n}();\n\n/**\n * Search index capable of returning results matching a set of tokens but without any meaningful rank or order.\n */\nvar UnorderedSearchIndex = /*#__PURE__*/function () {\n  function UnorderedSearchIndex() {\n    this._tokenToUidToDocumentMap = {};\n  }\n  /**\n   * @inheritDocs\n   */\n\n\n  var _proto = UnorderedSearchIndex.prototype;\n\n  _proto.indexDocument = function indexDocument(token, uid, doc) {\n    if (typeof this._tokenToUidToDocumentMap[token] !== 'object') {\n      this._tokenToUidToDocumentMap[token] = {};\n    }\n\n    this._tokenToUidToDocumentMap[token][uid] = doc;\n  }\n  /**\n   * @inheritDocs\n   */\n  ;\n\n  _proto.search = function search(tokens, corpus) {\n    var intersectingDocumentMap = {};\n    var tokenToUidToDocumentMap = this._tokenToUidToDocumentMap;\n\n    for (var i = 0, numTokens = tokens.length; i < numTokens; i++) {\n      var token = tokens[i];\n      var documentMap = tokenToUidToDocumentMap[token]; // Short circuit if no matches were found for any given token.\n\n      if (!documentMap) {\n        return [];\n      }\n\n      if (i === 0) {\n        var keys = Object.keys(documentMap);\n\n        for (var j = 0, numKeys = keys.length; j < numKeys; j++) {\n          var uid = keys[j];\n          intersectingDocumentMap[uid] = documentMap[uid];\n        }\n      } else {\n        var keys = Object.keys(intersectingDocumentMap);\n\n        for (var j = 0, numKeys = keys.length; j < numKeys; j++) {\n          var uid = keys[j];\n\n          if (typeof documentMap[uid] !== 'object') {\n            delete intersectingDocumentMap[uid];\n          }\n        }\n      }\n    }\n\n    var keys = Object.keys(intersectingDocumentMap);\n    var documents = [];\n\n    for (var i = 0, numKeys = keys.length; i < numKeys; i++) {\n      var uid = keys[i];\n      documents.push(intersectingDocumentMap[uid]);\n    }\n\n    return documents;\n  };\n\n  return UnorderedSearchIndex;\n}();\n\nvar REGEX = /[^a-zа-яё0-9\\-']+/i;\n/**\n * Simple tokenizer that splits strings on whitespace characters and returns an array of all non-empty substrings.\n */\n\nvar SimpleTokenizer = /*#__PURE__*/function () {\n  function SimpleTokenizer() {}\n\n  var _proto = SimpleTokenizer.prototype;\n\n  /**\n   * @inheritDocs\n   */\n  _proto.tokenize = function tokenize(text) {\n    return text.split(REGEX).filter(function (text) {\n      return text;\n    } // Filter empty tokens\n    );\n  };\n\n  return SimpleTokenizer;\n}();\n\n/**\n * Stemming is the process of reducing search tokens to their root (or stem) so that searches for different forms of a\n * word will match. For example \"search\", \"searching\" and \"searched\" are all reduced to the stem \"search\".\n *\n * <p>This stemming tokenizer converts tokens (words) to their stem forms before returning them. It requires an\n * external stemming function to be provided; for this purpose I recommend the NPM 'porter-stemmer' library.\n *\n * <p>For more information see http : //tartarus.org/~martin/PorterStemmer/\n */\nvar StemmingTokenizer = /*#__PURE__*/function () {\n  /**\n   * Constructor.\n   *\n   * @param stemmingFunction Function capable of accepting a word and returning its stem.\n   * @param decoratedIndexStrategy Index strategy to be run after all stop words have been removed.\n   */\n  function StemmingTokenizer(stemmingFunction, decoratedTokenizer) {\n    this._stemmingFunction = stemmingFunction;\n    this._tokenizer = decoratedTokenizer;\n  }\n  /**\n   * @inheritDocs\n   */\n\n\n  var _proto = StemmingTokenizer.prototype;\n\n  _proto.tokenize = function tokenize(text) {\n    return this._tokenizer.tokenize(text).map(this._stemmingFunction);\n  };\n\n  return StemmingTokenizer;\n}();\n\n/**\n * Stop words list copied from Lunr JS.\n */\nvar StopWordsMap = {\n  a: true,\n  able: true,\n  about: true,\n  across: true,\n  after: true,\n  all: true,\n  almost: true,\n  also: true,\n  am: true,\n  among: true,\n  an: true,\n  and: true,\n  any: true,\n  are: true,\n  as: true,\n  at: true,\n  be: true,\n  because: true,\n  been: true,\n  but: true,\n  by: true,\n  can: true,\n  cannot: true,\n  could: true,\n  dear: true,\n  did: true,\n  'do': true,\n  does: true,\n  either: true,\n  'else': true,\n  ever: true,\n  every: true,\n  'for': true,\n  from: true,\n  'get': true,\n  got: true,\n  had: true,\n  has: true,\n  have: true,\n  he: true,\n  her: true,\n  hers: true,\n  him: true,\n  his: true,\n  how: true,\n  however: true,\n  i: true,\n  'if': true,\n  'in': true,\n  into: true,\n  is: true,\n  it: true,\n  its: true,\n  just: true,\n  least: true,\n  \"let\": true,\n  like: true,\n  likely: true,\n  may: true,\n  me: true,\n  might: true,\n  most: true,\n  must: true,\n  my: true,\n  neither: true,\n  no: true,\n  nor: true,\n  not: true,\n  of: true,\n  off: true,\n  often: true,\n  on: true,\n  only: true,\n  or: true,\n  other: true,\n  our: true,\n  own: true,\n  rather: true,\n  said: true,\n  say: true,\n  says: true,\n  she: true,\n  should: true,\n  since: true,\n  so: true,\n  some: true,\n  than: true,\n  that: true,\n  the: true,\n  their: true,\n  them: true,\n  then: true,\n  there: true,\n  these: true,\n  they: true,\n  'this': true,\n  tis: true,\n  to: true,\n  too: true,\n  twas: true,\n  us: true,\n  wants: true,\n  was: true,\n  we: true,\n  were: true,\n  what: true,\n  when: true,\n  where: true,\n  which: true,\n  'while': true,\n  who: true,\n  whom: true,\n  why: true,\n  will: true,\n  'with': true,\n  would: true,\n  yet: true,\n  you: true,\n  your: true\n}; // Prevent false positives for inherited properties\n\nStopWordsMap.constructor = false;\nStopWordsMap.hasOwnProperty = false;\nStopWordsMap.isPrototypeOf = false;\nStopWordsMap.propertyIsEnumerable = false;\nStopWordsMap.toLocaleString = false;\nStopWordsMap.toString = false;\nStopWordsMap.valueOf = false;\n\n/**\n * Stop words are very common (e.g. \"a\", \"and\", \"the\") and are often not semantically meaningful in the context of a\n * search. This tokenizer removes stop words from a set of tokens before passing the remaining tokens along for\n * indexing or searching purposes.\n */\n\nvar StopWordsTokenizer = /*#__PURE__*/function () {\n  /**\n   * Constructor.\n   *\n   * @param decoratedIndexStrategy Index strategy to be run after all stop words have been removed.\n   */\n  function StopWordsTokenizer(decoratedTokenizer) {\n    this._tokenizer = decoratedTokenizer;\n  }\n  /**\n   * @inheritDocs\n   */\n\n\n  var _proto = StopWordsTokenizer.prototype;\n\n  _proto.tokenize = function tokenize(text) {\n    return this._tokenizer.tokenize(text).filter(function (token) {\n      return !StopWordsMap[token];\n    });\n  };\n\n  return StopWordsTokenizer;\n}();\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\n/**\n * Simple client-side searching within a set of documents.\n *\n * <p>Documents can be searched by any number of fields. Indexing and search strategies are highly customizable.\n */\nvar Search = /*#__PURE__*/function () {\n  /**\n   * Array containing either a property name or a path (list of property names) to a nested value\n   */\n\n  /**\n   * Constructor.\n   * @param uidFieldName Field containing values that uniquely identify search documents; this field's values are used\n   *                     to ensure that a search result set does not contain duplicate objects.\n   */\n  function Search(uidFieldName) {\n    if (!uidFieldName) {\n      throw Error('js-search requires a uid field name constructor parameter');\n    }\n\n    this._uidFieldName = uidFieldName; // Set default/recommended strategies\n\n    this._indexStrategy = new PrefixIndexStrategy();\n    this._searchIndex = new TfIdfSearchIndex(uidFieldName);\n    this._sanitizer = new LowerCaseSanitizer();\n    this._tokenizer = new SimpleTokenizer();\n    this._documents = [];\n    this._searchableFields = [];\n  }\n  /**\n   * Override the default index strategy.\n   * @param value Custom index strategy\n   * @throws Error if documents have already been indexed by this search instance\n   */\n\n\n  var _proto = Search.prototype;\n\n  /**\n   * Add a searchable document to the index. Document will automatically be indexed for search.\n   * @param document\n   */\n  _proto.addDocument = function addDocument(document) {\n    this.addDocuments([document]);\n  }\n  /**\n   * Adds searchable documents to the index. Documents will automatically be indexed for search.\n   * @param document\n   */\n  ;\n\n  _proto.addDocuments = function addDocuments(documents) {\n    this._documents = this._documents.concat(documents);\n    this.indexDocuments_(documents, this._searchableFields);\n  }\n  /**\n   * Add a new searchable field to the index. Existing documents will automatically be indexed using this new field.\n   *\n   * @param field Searchable field or field path. Pass a string to index a top-level field and an array of strings for nested fields.\n   */\n  ;\n\n  _proto.addIndex = function addIndex(field) {\n    this._searchableFields.push(field);\n\n    this.indexDocuments_(this._documents, [field]);\n  }\n  /**\n   * Search all documents for ones matching the specified query text.\n   * @param query\n   * @returns {Array<Object>}\n   */\n  ;\n\n  _proto.search = function search(query) {\n    var tokens = this._tokenizer.tokenize(this._sanitizer.sanitize(query));\n\n    return this._searchIndex.search(tokens, this._documents);\n  }\n  /**\n   * @param documents\n   * @param _searchableFields Array containing property names and paths (lists of property names) to nested values\n   * @private\n   */\n  ;\n\n  _proto.indexDocuments_ = function indexDocuments_(documents, _searchableFields) {\n    this._initialized = true;\n    var indexStrategy = this._indexStrategy;\n    var sanitizer = this._sanitizer;\n    var searchIndex = this._searchIndex;\n    var tokenizer = this._tokenizer;\n    var uidFieldName = this._uidFieldName;\n\n    for (var di = 0, numDocuments = documents.length; di < numDocuments; di++) {\n      var doc = documents[di];\n      var uid;\n\n      if (uidFieldName instanceof Array) {\n        uid = getNestedFieldValue(doc, uidFieldName);\n      } else {\n        uid = doc[uidFieldName];\n      }\n\n      for (var sfi = 0, numSearchableFields = _searchableFields.length; sfi < numSearchableFields; sfi++) {\n        var fieldValue;\n        var searchableField = _searchableFields[sfi];\n\n        if (searchableField instanceof Array) {\n          fieldValue = getNestedFieldValue(doc, searchableField);\n        } else {\n          fieldValue = doc[searchableField];\n        }\n\n        if (fieldValue != null && typeof fieldValue !== 'string' && fieldValue.toString) {\n          fieldValue = fieldValue.toString();\n        }\n\n        if (typeof fieldValue === 'string') {\n          var fieldTokens = tokenizer.tokenize(sanitizer.sanitize(fieldValue));\n\n          for (var fti = 0, numFieldValues = fieldTokens.length; fti < numFieldValues; fti++) {\n            var fieldToken = fieldTokens[fti];\n            var expandedTokens = indexStrategy.expandToken(fieldToken);\n\n            for (var eti = 0, nummExpandedTokens = expandedTokens.length; eti < nummExpandedTokens; eti++) {\n              var expandedToken = expandedTokens[eti];\n              searchIndex.indexDocument(expandedToken, uid, doc);\n            }\n          }\n        }\n      }\n    }\n  };\n\n  _createClass(Search, [{\n    key: \"indexStrategy\",\n    set: function set(value) {\n      if (this._initialized) {\n        throw Error('IIndexStrategy cannot be set after initialization');\n      }\n\n      this._indexStrategy = value;\n    },\n    get: function get() {\n      return this._indexStrategy;\n    }\n    /**\n     * Override the default text sanitizing strategy.\n     * @param value Custom text sanitizing strategy\n     * @throws Error if documents have already been indexed by this search instance\n     */\n\n  }, {\n    key: \"sanitizer\",\n    set: function set(value) {\n      if (this._initialized) {\n        throw Error('ISanitizer cannot be set after initialization');\n      }\n\n      this._sanitizer = value;\n    },\n    get: function get() {\n      return this._sanitizer;\n    }\n    /**\n     * Override the default search index strategy.\n     * @param value Custom search index strategy\n     * @throws Error if documents have already been indexed\n     */\n\n  }, {\n    key: \"searchIndex\",\n    set: function set(value) {\n      if (this._initialized) {\n        throw Error('ISearchIndex cannot be set after initialization');\n      }\n\n      this._searchIndex = value;\n    },\n    get: function get() {\n      return this._searchIndex;\n    }\n    /**\n     * Override the default text tokenizing strategy.\n     * @param value Custom text tokenizing strategy\n     * @throws Error if documents have already been indexed by this search instance\n     */\n\n  }, {\n    key: \"tokenizer\",\n    set: function set(value) {\n      if (this._initialized) {\n        throw Error('ITokenizer cannot be set after initialization');\n      }\n\n      this._tokenizer = value;\n    },\n    get: function get() {\n      return this._tokenizer;\n    }\n  }]);\n\n  return Search;\n}();\n\n/**\n * This utility highlights the occurrences of tokens within a string of text. It can be used to give visual indicators\n * of match criteria within searchable fields.\n *\n * <p>For performance purposes this highlighter only works with full-word or prefix token indexes.\n */\nvar TokenHighlighter = /*#__PURE__*/function () {\n  /**\n   * Constructor.\n   *\n   * @param opt_indexStrategy Index strategy used by Search\n   * @param opt_sanitizer Sanitizer used by Search\n   * @param opt_wrapperTagName Optional wrapper tag name; defaults to 'mark' (e.g. <mark>)\n   */\n  function TokenHighlighter(opt_indexStrategy, opt_sanitizer, opt_wrapperTagName) {\n    this._indexStrategy = opt_indexStrategy || new PrefixIndexStrategy();\n    this._sanitizer = opt_sanitizer || new LowerCaseSanitizer();\n    this._wrapperTagName = opt_wrapperTagName || 'mark';\n  }\n  /**\n   * Highlights token occurrences within a string by wrapping them with a DOM element.\n   *\n   * @param text e.g. \"john wayne\"\n   * @param tokens e.g. [\"wa\"]\n   * @returns {string} e.g. \"john <mark>wa</mark>yne\"\n   */\n\n\n  var _proto = TokenHighlighter.prototype;\n\n  _proto.highlight = function highlight(text, tokens) {\n    var tagsLength = this._wrapText('').length;\n\n    var tokenDictionary = Object.create(null); // Create a token map for easier lookup below.\n\n    for (var i = 0, numTokens = tokens.length; i < numTokens; i++) {\n      var token = this._sanitizer.sanitize(tokens[i]);\n\n      var expandedTokens = this._indexStrategy.expandToken(token);\n\n      for (var j = 0, numExpandedTokens = expandedTokens.length; j < numExpandedTokens; j++) {\n        var expandedToken = expandedTokens[j];\n\n        if (!tokenDictionary[expandedToken]) {\n          tokenDictionary[expandedToken] = [token];\n        } else {\n          tokenDictionary[expandedToken].push(token);\n        }\n      }\n    } // Track actualCurrentWord and sanitizedCurrentWord separately in case we encounter nested tags.\n\n\n    var actualCurrentWord = '';\n    var sanitizedCurrentWord = '';\n    var currentWordStartIndex = 0; // Note this assumes either prefix or full word matching.\n\n    for (var i = 0, textLength = text.length; i < textLength; i++) {\n      var character = text.charAt(i);\n\n      if (character === ' ') {\n        actualCurrentWord = '';\n        sanitizedCurrentWord = '';\n        currentWordStartIndex = i + 1;\n      } else {\n        actualCurrentWord += character;\n        sanitizedCurrentWord += this._sanitizer.sanitize(character);\n      }\n\n      if (tokenDictionary[sanitizedCurrentWord] && tokenDictionary[sanitizedCurrentWord].indexOf(sanitizedCurrentWord) >= 0) {\n        actualCurrentWord = this._wrapText(actualCurrentWord);\n        text = text.substring(0, currentWordStartIndex) + actualCurrentWord + text.substring(i + 1);\n        i += tagsLength;\n        textLength += tagsLength;\n      }\n    }\n\n    return text;\n  }\n  /**\n   * @param text to wrap\n   * @returns Text wrapped by wrapper tag (e.g. \"foo\" becomes \"<mark>foo</mark>\")\n   * @private\n   */\n  ;\n\n  _proto._wrapText = function _wrapText(text) {\n    var tagName = this._wrapperTagName;\n    return \"<\" + tagName + \">\" + text + \"</\" + tagName + \">\";\n  };\n\n  return TokenHighlighter;\n}();\n\nexport { AllSubstringsIndexStrategy, CaseSensitiveSanitizer, ExactWordIndexStrategy, LowerCaseSanitizer, PrefixIndexStrategy, Search, SimpleTokenizer, StemmingTokenizer, StopWordsMap, StopWordsTokenizer, TfIdfSearchIndex, TokenHighlighter, UnorderedSearchIndex };\n","import React from \"react\";\nimport PropTypes from 'prop-types'\nimport * as JsSearch from 'js-search'\nimport OccupationSearch from './OccupationSearch'\n\n\nconst JsOccSearch = (props) => {\n  if (props.source === undefined) throw new Error('JsSearch requires a \"source\"');\n\n  const idxJsSearch = new JsSearch.Search('id')\n  // default\n  idxJsSearch.searchIndex = new JsSearch.TfIdfSearchIndex();\n\n  // Search index capable of returning results matching a set of tokens\n  // but without any meaningful rank or order.\n  //idxJsSearch.searchIndex = new JsSearch.UnorderedSearchIndex();\n\n  /** -------- */\n  \n  // default -- And the best\n  idxJsSearch.indexStrategy = new JsSearch.PrefixIndexStrategy();\n\n  // this index strategy is built for all substrings matches.\n  //idxJsSearch.indexStrategy = new JsSearch.AllSubstringsIndexStrategy();\n\n  // this index strategy is built for exact word matches.\n  //idxJsSearch.indexStrategy = new JsSearch.ExactWordIndexStrategy();\n\n  idxJsSearch.addIndex('nocTitle')\n  idxJsSearch.addIndex('combinedExamples')\n  idxJsSearch.addDocuments(props.source)\n\n  const queryFunc = (query) => {\n    return idxJsSearch.search(query).map(result => {\n      return {\n        title: result.nocTitle,\n        description: result.combinedExamples,\n        meta: `Code ${result.nocCode} -- Level ${result.nocLevel}`,\n      }} // Mapping makes the consuming resultRender not dump all the props on the DOM\n    )\n  }\n  return (\n    <OccupationSearch key='js-search' queryFn={queryFunc} />\n  );\n};\n\nJsOccSearch.propTypes = {\n  source: PropTypes.array.isRequired,\n}\n\nexport default JsOccSearch;"],"sourceRoot":""}