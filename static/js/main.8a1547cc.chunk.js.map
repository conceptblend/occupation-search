{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["FuseSearch","React","lazy","TextSearch","JsOccSearch","extendedOccupations","nocTitle","nocLevel","nocCode","combinedExamples","examples","nocSource","nocData","concat","map","entry","index","id","naicsSource","naicsData","App","SearchComponents","props","fallback","Segment","vertical","Header","as","key","keyVal","source","panes","menuItem","render","Tab","Pane","attached","Container","style","marginBottom","exact","path","defaultActiveIndex","menu","secondary","pointing","to","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8a1547cc.chunk.js","sourcesContent":["import React, { Suspense } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { HashRouter, Switch, Route, Redirect } from \"react-router-dom\";\nimport { Container, Header, Segment, Tab } from \"semantic-ui-react\";\n\nimport { data as nocData } from \"./data/noc-reduced-ext.json\";\nimport { data as naicsData } from \"./data/naics-reduced-ext.json\";\n\nconst FuseSearch = React.lazy(() => import(\"./components/FuseSearch\"));\nconst TextSearch = React.lazy(() => import(\"./components/TextSearch\"));\nconst JsOccSearch = React.lazy(() => import(\"./components/JsOccSearch\"));\n//const LunrSearch = React.lazy(() => import('./components/LunrSearch'));\n\nconst extendedOccupations = [\n  {\n    nocTitle: \"Not working\",\n    nocLevel: \"-1\",\n    nocCode: \"-1\",\n    combinedExamples: \";unemployed;disability;\",\n    examples: [\"unemployed\", \"disability\"]\n  },\n  {\n    nocTitle: \"Retired\",\n    nocLevel: \"-1\",\n    nocCode: \"-1\",\n    combinedExamples: \"\",\n    examples: []\n  },\n  {\n    nocTitle: \"Student\",\n    nocLevel: \"-1\",\n    nocCode: \"-1\",\n    combinedExamples: \"\",\n    examples: []\n  },\n  {\n    nocTitle: \"Homemaker\",\n    nocLevel: \"-1\",\n    nocCode: \"-1\",\n    combinedExamples: \";stay at home;mom;dad;parent;\",\n    examples: [\"stay at home\", \"mom\", \"dad\", \"parent\"]\n  }\n];\nconst nocSource = nocData.concat(extendedOccupations).map((entry, index) => {\n  return {\n    ...entry,\n    id: index\n  };\n});\n\nconst naicsSource = naicsData.concat(extendedOccupations).map((entry, index) => {\n  return {\n    ...entry,\n    id: index\n  };\n});\n\nfunction App() {\n  const SearchComponents = props => {\n    return (\n      <Suspense fallback={<div>Loading...</div>}>\n        <Segment vertical>\n          <Header as=\"h3\">Text</Header>\n          <TextSearch key={`${props.keyVal}-text`} source={props.source} />\n        </Segment>\n        <Segment vertical>\n          <Header as=\"h3\">Fuse</Header>\n          <FuseSearch key={`${props.keyVal}-fuse`} source={props.source} />\n        </Segment>\n        <Segment vertical>\n          <Header as=\"h3\">JS Search</Header>\n          <JsOccSearch key={`${props.keyVal}-js`} source={props.source} />\n        </Segment>\n        {/*\n        <Segment vertical>\n          <Header as=\"h3\">Lunr</Header>\n          <LunrSearch key={`${props.keyVal}-lunr`} source={props.source} />\n        </Segment>\n        */}\n      </Suspense>\n    );\n  };\n  SearchComponents.propTypes = {\n    source: PropTypes.array.isRequired\n  };\n\n  const panes = [\n    {\n      menuItem: \"NOC\",\n      render: () => (\n        <Tab.Pane attached={false}>\n          <SearchComponents key=\"nocs\" keyVal=\"nocs\" source={nocSource} />\n        </Tab.Pane>\n      )\n    },\n    {\n      menuItem: \"NAICS\",\n      render: () => (\n        <Tab.Pane attached={false}>\n          <SearchComponents key=\"naics\" keyVal=\"naics\" source={naicsSource} />\n        </Tab.Pane>\n      )\n    }\n  ];\n\n  return (\n    <Container style={{ marginBottom: \"5rem\" }}>\n      <Segment vertical>\n        <Header as=\"h1\">Occupation Explorers</Header>\n      </Segment>\n      <Segment vertical>\n        <HashRouter>\n          <Suspense fallback={<div>Loading...</div>}>\n            <Switch>\n              <Route exact path={[\"/fuse\", \"/fuse/noc\"]}>\n                <Header as=\"h3\">NOC: Fuse</Header>\n                <FuseSearch key=\"fuse-noc\" source={nocSource} />\n              </Route>\n              <Route exact path=\"/fuse/naics\">\n                <Header as=\"h3\">NAICS: Fuse</Header>\n                <FuseSearch key=\"fuse-naics\" source={naicsSource} />\n              </Route>\n              <Route exact path={[\"/text\", \"/text/noc\"]}>\n                <Header as=\"h3\">NOC: Text</Header>\n                <TextSearch key=\"text-noc\" source={nocSource} />\n              </Route>\n              <Route exact path=\"/text/naics\">\n                <Header as=\"h3\">NAICS: Text</Header>\n                <TextSearch key=\"text-naics\" source={naicsSource} />\n              </Route>\n              <Route exact path={[\"/js-search\", \"/js-search/noc\"]}>\n                <Header as=\"h3\">NOC: JS Search</Header>\n                <JsOccSearch key=\"js-noc\" source={nocSource} />\n              </Route>\n              <Route exact path=\"/js-search/naics\">\n                <Header as=\"h3\">NAICS: JS Search</Header>\n                <JsOccSearch key=\"js-naics\" source={naicsSource} />\n              </Route>\n              <Route exact path=\"/\">\n                <Tab defaultActiveIndex={0} menu={{ secondary: true, pointing: true }} panes={panes} />\n              </Route>\n              <Route path=\"*\">\n                <Redirect to=\"/\" />\n              </Route>\n            </Switch>\n          </Suspense>\n        </HashRouter>\n      </Segment>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport 'semantic-ui-css/semantic.min.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  /*<React.StrictMode>*/\n  \n    <App />\n  \n  /*</React.StrictMode>*/,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}