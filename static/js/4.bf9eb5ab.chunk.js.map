{"version":3,"sources":["components/OccupationSearch.jsx","components/FuseSearch.jsx"],"names":["resultRenderer","title","key","OccupationSearch","props","useState","isLoading","setIsLoading","query","setQuery","results","setResults","selectedOccupation","setSelectedOccupation","Field","fluid","input","icon","iconPosition","loading","onResultSelect","e","result","onSearchChange","_","debounce","value","setTimeout","length","queryFn","leading","description","header","meta","defaultProps","FuseSearch","undefined","source","Error","fuse","Fuse","shouldSort","includeScore","threshold","location","distance","minMatchCharLength","keys","name","weight","search","map","item","nocTitle","combinedExamples","nocCode","nocLevel"],"mappings":"wLAMMA,EAAiB,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,MAAe,CAACA,GAAS,yBAAKC,IAAI,SAASD,KAO5DE,EAAmB,SAACC,GAAW,IAAD,EACAC,oBAAS,GADT,mBAC3BC,EAD2B,KAChBC,EADgB,OAERF,mBAAS,IAFD,mBAE3BG,EAF2B,KAEpBC,EAFoB,OAGJJ,mBAAS,IAHL,mBAG3BK,EAH2B,KAGlBC,EAHkB,OAIkBN,mBAAS,IAJ3B,mBAI3BO,EAJ2B,KAIPC,EAJO,KA6BlC,OACE,oCACE,kBAAC,IAAD,KACE,kBAAC,IAAKC,MAAN,KACE,mFACA,kBAAC,IAAD,CACEC,OAAK,EACLC,MAAO,CAAEC,KAAM,SAAUC,aAAc,QACvCC,QAASb,EACTc,eA1BiB,SAACC,EAAD,GAAqB,IAAfC,EAAc,EAAdA,OAC/Bb,EAAS,IACTI,EAAsBS,IAyBdC,eAAgBC,IAAEC,UAtBD,SAACJ,EAAD,GAAmB,IAAbK,EAAY,EAAZA,MAC/BnB,GAAa,GACbE,EAASiB,GAETC,YAAW,WACT,GAAID,EAAME,OAAS,EAAG,OAfxBrB,GAAa,GACbE,EAAS,SACTE,EAAW,IAcTJ,GAAa,GACbI,EAAWP,EAAMyB,QAAQH,MACxB,OAcoD,IAAK,CAClDI,SAAS,IAEXpB,QAASA,EACTV,eAAgBA,EAChB0B,MAAOlB,MAIXI,EAAmBX,OACnB,kBAAC,IAAD,CACEc,OAAK,EACLgB,YAAanB,EAAmBmB,YAChCC,OAAQpB,EAAmBX,MAC3BgC,KAAMrB,EAAmBqB,SAUnC9B,EAAiB+B,aAAe,GAEjB/B,O,iCC9Ef,6CAgDegC,UA1CI,SAAC/B,GAClB,QAAqBgC,IAAjBhC,EAAMiC,OAAsB,MAAM,IAAIC,MAAM,kCAEhD,IAAMC,EAAO,IAAIC,IACfpC,EAAMiC,OACN,CACEI,YAAY,EACZC,cAAc,EACdC,UAAW,GACXC,SAAU,EACVC,SAAU,GACVC,mBAAoB,EACpBC,KAAM,CAAC,CACLC,KAAM,WACNC,OAAQ,KACR,CACAD,KAAM,WACNC,OAAQ,OAgBd,OACE,kBAAC,IAAD,CAAkB/C,IAAI,OAAO2B,QAZb,SAACrB,GACjB,OAAO+B,EAAKW,OAAO1C,GAAO2C,KACxB,SAAA7B,GACE,MAAO,CACLrB,MAAOqB,EAAO8B,KAAKC,SACnBtB,YAAaT,EAAO8B,KAAKE,iBACzBrB,KAAK,QAAD,OAAUX,EAAO8B,KAAKG,QAAtB,qBAA0CjC,EAAO8B,KAAKI","file":"static/js/4.bf9eb5ab.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from 'prop-types'\nimport { Search, Form, Card } from \"semantic-ui-react\";\nimport _ from 'lodash'\n\n\nconst resultRenderer = ({ title }) => [title && <div key='title'>{title}</div>];\n\nresultRenderer.propTypes = {\n  title: PropTypes.string,\n}\n\n\nconst OccupationSearch = (props) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [query, setQuery] = useState('');\n  const [results, setResults] = useState([]);\n  const [selectedOccupation, setSelectedOccupation] = useState({});\n\n  const resetState = () => {\n    setIsLoading(false);\n    setQuery('');\n    setResults([]);\n  }\n\n  const handleResultSelect = (e, { result }) =>  {\n    setQuery(''); //result.nocTitle\n    setSelectedOccupation(result);\n  }\n\n  const handleSearchChange = (e, { value }) => {\n    setIsLoading(true);\n    setQuery(value);\n\n    setTimeout(() => {\n      if (value.length < 1) return resetState()\n      setIsLoading(false)\n      setResults(props.queryFn(value))\n    }, 300)\n  }\n  \n\n  return (\n    <>\n      <Form>\n        <Form.Field>\n          <label>Type your job title and select the closest match</label>\n          <Search\n            fluid\n            input={{ icon: 'search', iconPosition: 'left' }}\n            loading={isLoading}\n            onResultSelect={handleResultSelect}\n            onSearchChange={_.debounce(handleSearchChange, 500, {\n              leading: true\n            })}\n            results={results}\n            resultRenderer={resultRenderer}\n            value={query}\n          />\n        </Form.Field>\n      </Form>\n      { selectedOccupation.title && \n        <Card\n          fluid\n          description={selectedOccupation.description}\n          header={selectedOccupation.title}\n          meta={selectedOccupation.meta}\n        />\n      }\n    </>\n  );\n};\n\nOccupationSearch.propTypes = {\n  queryFn: PropTypes.func.isRequired,\n}\nOccupationSearch.defaultProps = {}\n\nexport default OccupationSearch;","import React from \"react\";\nimport PropTypes from 'prop-types'\nimport Fuse from 'fuse.js'\nimport OccupationSearch from './OccupationSearch'\n\n\nconst FuseSearch = (props) => {\n  if (props.source === undefined) throw new Error('FuseSearch requires a \"source\"');\n\n  const fuse = new Fuse(\n    props.source, // \"source\" is the item array\n    {\n      shouldSort: true,\n      includeScore: true,\n      threshold: 0.2,\n      location: 0,\n      distance: 60,\n      minMatchCharLength: 3,\n      keys: [{\n        name: \"nocTitle\",\n        weight: .99,\n      },{\n        name: \"examples\",\n        weight: 0.3,\n      }]\n    }\n  );\n\n  const queryFunc = (query) => {\n    return fuse.search(query).map(\n      result => {\n        return {\n          title: result.item.nocTitle,\n          description: result.item.combinedExamples,\n          meta: `Code ${result.item.nocCode} -- Level ${result.item.nocLevel}`,\n        } // Mapping makes the consuming resultRender not dump all the props on the DOM\n      }\n    )\n  }\n  return (\n    <OccupationSearch key='fuse' queryFn={queryFunc} />\n  );\n};\n\nFuseSearch.propTypes = {\n  source: PropTypes.array.isRequired,\n}\n\nexport default FuseSearch;"],"sourceRoot":""}